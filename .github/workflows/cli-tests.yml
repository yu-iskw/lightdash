name: CLI tests
on:
  pull_request:
  deployment_status:

env:
  NODE_ENV: 'development'

jobs:

  cli-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dbt: ['1.8']
    name: dbt ${{ matrix.dbt }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      ## Install pip
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9.x'
      - run: pip install dbt-core~=${{ matrix.dbt }}.0 dbt-postgres~=${{ matrix.dbt }}.0

      ## DBT seed
      - name: Seed DBT
        run: dbt seed --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR --full-refresh
        env:
          PROJECT_DIR: "./examples/full-jaffle-shop-demo/dbt"
          PROFILES_DIR: "./examples/full-jaffle-shop-demo/profiles"
          PGHOST: ${{secrets.PGHOST}}
          PGPASSWORD: ${{secrets.PGPASSWORD}}
          PGPORT: 5432
          PGUSER: postgres
          PGDATABASE: postgres
          SEED_SCHEMA: jaffle-${{strategy.job-index}}

      ## DBT run
      - name: Run DBT
        run: dbt run --profiles-dir $PROFILES_DIR --project-dir $PROJECT_DIR
        env:
          PROJECT_DIR: "./examples/full-jaffle-shop-demo/dbt"
          PROFILES_DIR: "./examples/full-jaffle-shop-demo/profiles"
          PGHOST: ${{secrets.PGHOST}}
          PGPASSWORD: ${{secrets.PGPASSWORD}}
          PGPORT: 5432
          PGUSER: postgres
          PGDATABASE: postgres
          SEED_SCHEMA: jaffle-${{strategy.job-index}}
      # Install packages
      - uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Install packages
        run: yarn install --frozen-lockfile
      # Build packages
      - name: Build packages/common module
        run: yarn common-build
      - name: Build packages/warehouses module
        run: yarn warehouses-build
      - name: Build and install packages/cli module
        run: cd packages/cli && yarn build && npm i -g
      - name: Test lightdash version
        run: |
          lightdash_version=$(lightdash --version)
          package_version=$(yarn workspace @lightdash/cli versions | grep '@lightdash/cli' | cut -d"'" -f 4)
          if [ $package_version = $lightdash_version ]; then exit 0 ; else echo "Version mismatch"; exit 1; fi
      - name: Test CLI
        run: |
          ${{ github.workspace }}/packages/cli/dist/index.js
